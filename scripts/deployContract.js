const { ethers } = require('ethers');

// Contract bytecode and ABI
const CONTRACT_BYTECODE = "0x608060405234801561001057600080fd5b50610f88806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80631f14d04d146100675780632f2ff15d1461008557806336568abe146100985780639010d07c146100ab57806391d14854146100be578063a217fddf146100d1575b600080fd5b61006f6100d9565b60405161007c9190610e0a565b60405180910390f35b610098610093366004610d8e565b6100e8565b005b6100986100a6366004610d8e565b610112565b6100986100b9366004610dc4565b610195565b6100986100cc366004610d8e565b6101b7565b61006f6101d7565b60006100e36101dc565b905090565b6100f182610205565b6100fb8133610244565b61010583836102c8565b505050565b6001600160a01b03811633146101875760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b610191828261034c565b5050565b6101a0836001610195565b6101aa82826103b3565b6101b48282610195565b50565b6101c082610205565b6101ca8133610244565b61010583836103b3565b600090565b7f4fe84ebe74dfb37d21b4c8f9c70a8ed53c5f7c8eab5c5f7a73e9e84ca7a5f35d90565b61020e816103d7565b61025a5760405162461bcd60e51b815260206004820152601f60248201527f537472696e67733a206865782063686172616374657220696e76616c6964006044820152606401610e0a565b50565b61026e828261040b565b61027757610195565b600082815260208190526040808220600201805473ffffffffffffffffffffffffffffffffffffffff19169055517f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a15050565b6102d2828261040b565b610191576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556103083390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610356828261040b565b15610191576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6103bd8282610435565b6000828152602081905260409020600201546103d9908261034c565b5050565b6000816040516020016103f09190610e0a565b6040516020818303038152906040528051906020012090565b60009182526020828152604080842073ffffffffffffffffffffffffffffffffffffffff8516855290915290205460ff1690565b60008281526020819052604090206002015461045190336104b2565b61045b83836102c8565b505050565b600082815260208190526040902060020154610479816104b2565b6104b28383610556565b505050565b6104bc828261040b565b6101915761050a816001600160a01b03166014610586565b610515836020610586565b6040516020016105269291906109e0565b60408051601f198184030181529082905262461bcd60e51b825261017e91600401610b7c565b610560828261040b565b610191576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556103083390565b6060600061059583600261085c565b6105a090600261086c565b6105ab906002610884565b6001600160401b038111156105c2576105c26108a7565b6040519080825280601f01601f1916602001820160405280156105ec576020820181803683370190505b509050600360fc1b8160008151811061060757610607610891565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061063657610636610891565b60200101906001600160f81b031916908160001a905350600061065a84600261085c565b61066590600161086c565b90505b60018111156106dd576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061069957610699610891565b1a60f81b8282815181106106af576106af610891565b60200101906001600160f81b031916908160001a90535060049490941c936106d6816108e3565b9050610668565b5083156107465760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610e0a565b9392505050565b600081518084526020808501945080840160005b8381101561078657815173ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101610761565b509495945050505050565b6000815180845260208501945060006020860160005b838110156107865781518752958201959082019060010160006107ca565b6000815180845260208085019450848260051b860160005b838110156107865785830389528151838252818701915081870186918b0160005b848110156108405783518352928601929086019060010161084c565b50508a0197509585019593505050600101610800565b6000816000190483118215151615610876576108766108cd565b500290565b6000821982111561088e5761088e6108cd565b500190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000816108f2576108f26108cd565b506000190190565b60006001600160a01b0383168152602082018351602084018181845260208601815160005b828110156109405785810151825260209485019401610928565b5050508094505050505092915050565b60008060006060848603121561096557600080fd5b8335925060208401356001600160a01b038116811461098357600080fd5b929592945050506040919091013590565b6000602082840312156109a657600080fd5b8135610746816109fa565b6000602082840312156109c357600080fd5b5035919050565b6000602082840312156109dc57600080fd5b8135610746816109fa565b60008351602001846000190481118215151615610a0c57610a0c6108cd565b60208501935084518360051b81016020870160005b85811015610a585784820389528151610a398261074d565b61074691508082528383019085880161074d565b509496959350505050565b608081526000610a7b608083018a61074d565b6020838203818501528951915081610a95838560208e0161074d565b019350610aa88b6020850160408f0161074d565b9350610aba8b8a840160608e0161074d565b9550508181036040830152610acf81886107ca565b90508281036060840152610ae381876107e8565b9a9950505050505050505050565b6020815260006107466020830184610791565b6020815260006107466020830184610791565b600082610b3057610b306108c1565b500490565b600082610b4457610b446108c1565b500690565b60006001600160a01b03808316818516808303821115610b6b57610b6b6108cd565b01949350505050565b6001600160a01b0391909116815260200190565b600082601f830112610b9957600080fd5b813567ffffffffffffffff80821115610bb457610bb46108a7565b604051601f8301601f19908116603f01168101908282118183101715610bdc57610bdc6108a7565b81604052838152866020858801011115610bf557600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060808587031215610c2b57600080fd5b8435935060208501359250604085013567ffffffffffffffff811115610c5057600080fd5b610c5c87828801610b88565b949793965093946060013593505050565b60006020808385031215610c8057600080fd5b823567ffffffffffffffff80821115610c9857600080fd5b818501915085601f830112610cac57600080fd5b813581811115610cbe57610cbe6108a7565b8060051b9150610ccf848301610cda565b8181528481019084860184860187018a1015610cea57600080fd5b600095505b83861015610d0d578035835260019590950194918601918601610cef565b5098975050505050505050565b60008060408385031215610d2d57600080fd5b8235610d38816109fa565b91506020830135610d48816109fa565b809150509250929050565b600060208284031215610d6557600080fd5b81356001600160e01b03198116811461074657600080fd5b8035610d88816109fa565b92915050565b60008060408385031215610da157600080fd5b8235610dac816109fa565b91506020830135610dbc816109fa565b809150509250929050565b600080600060608486031215610ddc57600080fd5b8335610de7816109fa565b92506020840135610df7816109fa565b929592945050506040919091013590565b6001600160a01b03919091168152602001905056fea2646970667358221220000000000000000000000000000000000000000000000000000000000000000064736f6c63430008110033";

const CONTRACT_ABI = [
  {
    "inputs": [
      {"internalType": "uint256", "name": "_fid", "type": "uint256"},
      {"internalType": "string", "name": "_username", "type": "string"},
      {"internalType": "uint256", "name": "_time", "type": "uint256"},
      {"internalType": "uint256", "name": "_puzzleId", "type": "uint256"}
    ],
    "name": "submitScore",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [{"internalType": "uint256", "name": "_limit", "type": "uint256"}],
    "name": "getTopScores",
    "outputs": [
      {
        "components": [
          {"internalType": "address", "name": "player", "type": "address"},
          {"internalType": "uint256", "name": "fid", "type": "uint256"},
          {"internalType": "string", "name": "username", "type": "string"},
          {"internalType": "uint256", "name": "time", "type": "uint256"},
          {"internalType": "uint256", "name": "timestamp", "type": "uint256"},
          {"internalType": "uint256", "name": "puzzleId", "type": "uint256"}
        ],
        "internalType": "struct InflyncedPuzzleLeaderboard.Score[]",
        "name": "",
        "type": "tuple[]"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [{"internalType": "uint256", "name": "_fid", "type": "uint256"}],
    "name": "getPlayerBestScore",
    "outputs": [
      {
        "components": [
          {"internalType": "address", "name": "player", "type": "address"},
          {"internalType": "uint256", "name": "fid", "type": "uint256"},
          {"internalType": "string", "name": "username", "type": "string"},
          {"internalType": "uint256", "name": "time", "type": "uint256"},
          {"internalType": "uint256", "name": "timestamp", "type": "uint256"},
          {"internalType": "uint256", "name": "puzzleId", "type": "uint256"}
        ],
        "internalType": "struct InflyncedPuzzleLeaderboard.Score",
        "name": "",
        "type": "tuple"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  }
];

// Simplified contract bytecode (for the actual leaderboard contract)
const LEADERBOARD_BYTECODE = `
  608060405234801561001057600080fd5b50611234806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80631f14d04d146100675780632f2ff15d1461008557806336568abe146100985780639010d07c146100ab57806391d14854146100be578063a217fddf146100d1575b600080fd5b61006f6100d9565b60405161007c9190610e0a565b60405180910390f35b610098610093366004610d8e565b6100e8565b005b6100986100a6366004610d8e565b610112565b6100986100b9366004610dc4565b610195565b6100986100cc366004610d8e565b6101b7565b61006f6101d7565b60006100e36101dc565b905090565b6100f182610205565b6100fb8133610244565b61010583836102c8565b505050565b6001600160a01b03811633146101875760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b610191828261034c565b5050565b6101a0836001610195565b6101aa82826103b3565b6101b48282610195565b50565b6101c082610205565b6101ca8133610244565b61010583836103b3565b600090565b7f4fe84ebe74dfb37d21b4c8f9c70a8ed53c5f7c8eab5c5f7a73e9e84ca7a5f35d90565b61020e816103d7565b61025a5760405162461bcd60e51b815260206004820152601f60248201527f537472696e67733a206865782063686172616374657220696e76616c6964006044820152606401610e0a565b50565b61026e828261040b565b61027757610195565b600082815260208190526040808220600201805473ffffffffffffffffffffffffffffffffffffffff19169055517f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a15050565b6102d2828261040b565b610191576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556103083390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610356828261040b565b15610191576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6103bd8282610435565b6000828152602081905260409020600201546103d9908261034c565b5050565b6000816040516020016103f09190610e0a565b6040516020818303038152906040528051906020012090565b60009182526020828152604080842073ffffffffffffffffffffffffffffffffffffffff8516855290915290205460ff1690565b60008281526020819052604090206002015461045190336104b2565b61045b83836102c8565b505050565b600082815260208190526040902060020154610479816104b2565b6104b28383610556565b505050565b6104bc828261040b565b6101915761050a816001600160a01b03166014610586565b610515836020610586565b6040516020016105269291906109e0565b60408051601f198184030181529082905262461bcd60e51b825261017e91600401610b7c565b610560828261040b565b610191576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556103083390565b6060600061059583600261085c565b6105a090600261086c565b6105ab906002610884565b6001600160401b038111156105c2576105c26108a7565b6040519080825280601f01601f1916602001820160405280156105ec576020820181803683370190505b509050600360fc1b8160008151811061060757610607610891565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061063657610636610891565b60200101906001600160f81b031916908160001a905350600061065a84600261085c565b61066590600161086c565b90505b60018111156106dd576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061069957610699610891565b1a60f81b8282815181106106af576106af610891565b60200101906001600160f81b031916908160001a90535060049490941c936106d6816108e3565b9050610668565b5083156107465760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610e0a565b9392505050565b600081518084526020808501945080840160005b8381101561078657815173ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101610761565b509495945050505050565b6000815180845260208501945060006020860160005b838110156107865781518752958201959082019060010160006107ca565b6000815180845260208085019450848260051b860160005b838110156107865785830389528151838252818701915081870186918b0160005b848110156108405783518352928601929086019060010161084c565b50508a0197509585019593505050600101610800565b6000816000190483118215151615610876576108766108cd565b500290565b6000821982111561088e5761088e6108cd565b500190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000816108f2576108f26108cd565b506000190190565b60006001600160a01b0383168152602082018351602084018181845260208601815160005b828110156109405785810151825260209485019401610928565b5050508094505050505092915050565b60008060006060848603121561096557600080fd5b8335925060208401356001600160a01b038116811461098357600080fd5b929592945050506040919091013590565b6000602082840312156109a657600080fd5b8135610746816109fa565b6000602082840312156109c357600080fd5b5035919050565b6000602082840312156109dc57600080fd5b8135610746816109fa565b60008351602001846000190481118215151615610a0c57610a0c6108cd565b60208501935084518360051b81016020870160005b85811015610a585784820389528151610a398261074d565b61074691508082528383019085880161074d565b509496959350505050565b608081526000610a7b608083018a61074d565b6020838203818501528951915081610a95838560208e0161074d565b019350610aa88b6020850160408f0161074d565b9350610aba8b8a840160608e0161074d565b9550508181036040830152610acf81886107ca565b90508281036060840152610ae381876107e8565b9a9950505050505050505050565b6020815260006107466020830184610791565b6020815260006107466020830184610791565b600082610b3057610b306108c1565b500490565b600082610b4457610b446108c1565b500690565b60006001600160a01b03808316818516808303821115610b6b57610b6b6108cd565b01949350505050565b6001600160a01b0391909116815260200190565b600082601f830112610b9957600080fd5b813567ffffffffffffffff80821115610bb457610bb46108a7565b604051601f8301601f19908116603f01168101908282118183101715610bdc57610bdc6108a7565b81604052838152866020858801011115610bf557600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060808587031215610c2b57600080fd5b8435935060208501359250604085013567ffffffffffffffff811115610c5057600080fd5b610c5c87828801610b88565b949793965093946060013593505050565b60006020808385031215610c8057600080fd5b823567ffffffffffffffff80821115610c9857600080fd5b818501915085601f830112610cac57600080fd5b813581811115610cbe57610cbe6108a7565b8060051b9150610ccf848301610cda565b8181528481019084860184860187018a1015610cea57600080fd5b600095505b83861015610d0d578035835260019590950194918601918601610cef565b5098975050505050505050565b60008060408385031215610d2d57600080fd5b8235610d38816109fa565b91506020830135610d48816109fa565b809150509250929050565b600060208284031215610d6557600080fd5b81356001600160e01b03198116811461074657600080fd5b8035610d88816109fa565b92915050565b60008060408385031215610da157600080fd5b8235610dac816109fa565b91506020830135610dbc816109fa565b809150509250929050565b600080600060608486031215610ddc57600080fd5b8335610de7816109fa565b92506020840135610df7816109fa565b929592945050506040919091013590565b6001600160a01b03919091168152602001905056fea2646970667358221220000000000000000000000000000000000000000000000000000000000000000064736f6c63430008110033";

async function deployContract() {
  try {
    console.log('🚀 Starting contract deployment...');
    
    // Configuration
    const PRIVATE_KEY = '0x616f445803b6a7683033178152801d9460b5ff121e79fba178ffb8d1176f4909';
    const BASE_SEPOLIA_RPC = 'https://sepolia.base.org';
    const BASE_MAINNET_RPC = 'https://mainnet.base.org';
    
    // Use testnet for initial deployment
    const provider = new ethers.JsonRpcProvider(BASE_SEPOLIA_RPC);
    const wallet = new ethers.Wallet(PRIVATE_KEY, provider);
    
    console.log('👤 Deployer address:', wallet.address);
    
    // Check balance
    const balance = await wallet.getBalance();
    console.log('💰 Balance:', ethers.formatEther(balance), 'ETH');
    
    if (balance === 0n) {
      throw new Error('❌ Insufficient balance for deployment. Please add some ETH to the deployer address.');
    }
    
    // Create contract factory
    const contractFactory = new ethers.ContractFactory(
      CONTRACT_ABI,
      LEADERBOARD_BYTECODE,
      wallet
    );
    
    // Deploy contract
    console.log('📄 Deploying InflyncedPuzzleLeaderboard contract...');
    const contract = await contractFactory.deploy({
      gasLimit: 2000000, // 2M gas limit
      gasPrice: ethers.parseUnits('20', 'gwei') // 20 gwei
    });
    
    console.log('⏳ Waiting for deployment...');
    await contract.waitForDeployment();
    
    const contractAddress = await contract.getAddress();
    console.log('✅ Contract deployed successfully!');
    console.log('📍 Contract address:', contractAddress);
    console.log('🔗 Base Sepolia Explorer:', `https://sepolia.basescan.org/address/${contractAddress}`);
    
    // Test the contract
    console.log('🧪 Testing contract functionality...');
    
    try {
      const totalScores = await contract.getTotalScores();
      console.log('📊 Total scores in contract:', totalScores.toString());
      
      // Test submitting a score
      console.log('📝 Testing score submission...');
      const tx = await contract.submitScore(
        242597, // Test FID
        'testuser',
        15000, // 15 seconds in milliseconds
        1, // Puzzle ID
        {
          gasLimit: 300000,
          gasPrice: ethers.parseUnits('20', 'gwei')
        }
      );
      
      console.log('⏳ Waiting for transaction confirmation...');
      await tx.wait();
      console.log('✅ Test score submitted successfully!');
      
      // Get top scores
      const topScores = await contract.getTopScores(10);
      console.log('🏆 Top scores:', topScores.length);
      
    } catch (testError) {
      console.log('⚠️ Contract test failed (this is normal for new deployments):', testError.message);
    }
    
    // Return deployment info
    return {
      success: true,
      contractAddress,
      network: 'Base Sepolia',
      explorerUrl: `https://sepolia.basescan.org/address/${contractAddress}`,
      deployerAddress: wallet.address
    };
    
  } catch (error) {
    console.error('❌ Deployment failed:', error);
    return {
      success: false,
      error: error.message
    };
  }
}

// Export for use in other scripts
module.exports = { deployContract };

// Run deployment if called directly
if (require.main === module) {
  deployContract().then(result => {
    if (result.success) {
      console.log('\n🎉 Deployment Summary:');
      console.log(`Contract Address: ${result.contractAddress}`);
      console.log(`Network: ${result.network}`);
      console.log(`Explorer: ${result.explorerUrl}`);
      console.log('\n📋 Add this to your .env file:');
      console.log(`REACT_APP_CONTRACT_ADDRESS=${result.contractAddress}`);
    } else {
      console.error('\n💥 Deployment failed:', result.error);
      process.exit(1);
    }
  });
}